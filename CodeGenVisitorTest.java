package cop5556fa17;

import static org.junit.Assert.*;

import java.awt.image.BufferedImage;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.lang.reflect.Method;

import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import cop5556fa17.CodeGenUtils.DynamicClassLoader;
import cop5556fa17.AST.Program;

public class CodeGenVisitorTest implements ImageResources{
	
	static boolean doPrint = true;
	static boolean doCreateFile = false;

	static void show(Object s) {
		if (doPrint) {
			System.out.println(s);
		}
	}

	@Rule
	public ExpectedException thrown = ExpectedException.none();
	private boolean devel = false;
	private boolean grade = true;
	

	public static final int Z = 0xFFFFFF;
	

	
	/**
	 * Generates bytecode for given input.
	 * Throws exceptions for Lexical, Syntax, and Type checking errors
	 * 
	 * @param input   String containing source code
	 * @return        Generated bytecode
	 * @throws Exception
	 */
	byte[] genCode(String input) throws Exception {
		
		//scan, parse, and type check
		Scanner scanner = new Scanner(input);
		show(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		Program program = parser.parse();
		TypeCheckVisitor v = new TypeCheckVisitor();
		program.visit(v, null);
		show(program);

		//generate code
		CodeGenVisitor cv = new CodeGenVisitor(devel,grade,null);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		
		//output the generated bytecode
		show(CodeGenUtils.bytecodeToString(bytecode));
		
		//write byte code to file 
		if (doCreateFile) {
			String name = ((Program) program).name;
			String classFileName = "bin/" + name + ".class";
			OutputStream output = new FileOutputStream(classFileName);
			output.write(bytecode);
			output.close();
			System.out.println("wrote classfile to " + classFileName);
		}
		
		//return generated classfile as byte array
		return bytecode;
	}
	
	/**
	 * Run main method in given class
	 * 
	 * @param className    
	 * @param bytecode    
	 * @param commandLineArgs  String array containing command line arguments, empty array if none
	 * @throws Exception
	 */
	void runCode(String className, byte[] bytecode, String[] commandLineArgs) throws Exception {
		RuntimeLog.initLog(); //initialize log used for grading.
		DynamicClassLoader loader = new DynamicClassLoader(Thread.currentThread().getContextClassLoader());
		Class<?> testClass = loader.define(className, bytecode);
		Class[] argTypes = {commandLineArgs.getClass()};
		Method m = testClass.getMethod("main", argTypes );
		show("Output from " + m + ":");  //print name of method to be executed
		Object passedArgs[] = {commandLineArgs};  //create array containing params, in this case a single array.
		m.invoke(null, passedArgs);	
	}
	
	
	/** Delays for 5 seconds.
	 * May be useful during development to delay closing frames displaying images 
     */
	void sleepFor5() throws Exception {
		Thread.sleep(5000);
	}
	
	/** Blocks program until a key is pressed to the console.
	 * May be useful during development to delay closing frames displaying images
	 */
	void waitForKey() throws IOException {
		System.out.println("enter any char to exit");
		int b = System.in.read();	
	}
	
	/**
	 * Used in most test cases.  Change once here to change behavior in all tests.
	 * 
	 * @throws Exception
	 */
	void keepFrame() throws Exception {
		sleepFor5();
	}
	
	
	@Test
	/**
	 * Empty program.  Test updated for new logging instructions.
	 * @throws Exception
	 */
	public void emptyProg() throws Exception {
		String prog = "emptyProg";	
		String input = prog;
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {};
		runCode(prog, bytecode, commandLineArgs);
		assertEquals("",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void image5() throws Exception {
		devel = false;
		grade = true;
		String prog = "image5";
		String input = prog + "\nimage[128,128] g;" 
				+ "\nimage[128,128] h;" 
				+ "\ng <- @ 0;" 
				+ "\ng -> SCREEN;"
				+ "\nh[[x,y]] = ! g[x,y];" 
				+ "\nh -> SCREEN;";
		
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = { imageFile1, imageFile2 };
		runCode(prog, bytecode, commandLineArgs);

		BufferedImage loggedImage0 = RuntimeLog.globalImageLog.get(0);
		BufferedImage loggedImage1 = RuntimeLog.globalImageLog.get(1);
		keepFrame();
		keepFrame();
		keepFrame();
		keepFrame();
		for (int y = 0; y < 128; y++) {
			for (int x = 0; x < 128; x++) {
				int pixel0 = 0x00FFFFFF ^ ImageSupport.getPixel(loggedImage0, x, y);
				int pixel1 = ImageSupport.getPixel(loggedImage1, x, y);
				assertEquals(pixel0, pixel1);
			}
		}

		
	}
	
	@Test
	public void image10() throws Exception {
		devel = false;
		grade = true;
		String prog = "image10";
		String input = prog
				+ "\nimage[1024,1024] g; "
				+ "\n\nimage[1024,1024] h; "
				+ "\ng <- @ 0;"
				+ "\ng -> SCREEN;"
				+ "\nh[[x,y]] =  g[x,Y-y];"
				+ "h -> SCREEN; \n";
		
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = { imageFile1 };
		runCode(prog, bytecode, commandLineArgs);

		BufferedImage h = RuntimeLog.globalImageLog.get(1);
		BufferedImage g = ImageSupport.readImage(imageFile1, 1024, 1024);
		for(int y = 0; y < 1024; y++) {
			for (int x = 0; x < 1024; x++) { 
				int pixel = ImageSupport.getPixel(h,x,y);
				int Y = ImageSupport.getY(h);
				int pixelRef = ImageSupport.getPixel(g,x,Y-y);
				assertEquals(pixelRef, pixel);
			}
		}

		keepFrame();
	}
	
	


	
	@Test
	public void canvas1() throws Exception{
		devel = false;
		grade = true;
		String prog = "image5";
		String input = prog 
				   + "\nimage[1024,1024] g;" 
				   +"\n\nimage[1024,1024] h;" 
				   +" \ng <- @ 0;"
				   +"\ng -> SCREEN;"
				   +"\nh[[x,y]] = ! g[x,y];"
				   +"h -> SCREEN; \n"
				   ;
		
		byte[] bytecode = genCode(input);	
		//String imageURL = "\"https://westernalaskalcc.org/SiteAssets/SitePages/Western%20Alaska%20LCC/360px-Caught_some_crabs.jpg\"";
		String[] commandLineArgs = {imageFile1}; 
		runCode(prog, bytecode, commandLineArgs);	
		
		BufferedImage loggedImage0 = RuntimeLog.globalImageLog.get(0);
		BufferedImage loggedImage1 = RuntimeLog.globalImageLog.get(1);
		BufferedImage test = ImageSupport.makeImage(1024, 1024);
		
		
		for(int y = 0; y < 1024; y++) {
            for (int x = 0; x < 1024; x++) {
                //int pixelRef = RuntimeFunctions.cart_y(RuntimeFunctions.polar_r(x, y), RuntimeFunctions.polar_a(x, y)); 
                ImageSupport.setPixel(ImageSupport.getPixel(loggedImage0, x,y)^Integer.MAX_VALUE,test,x,y);
                int pixel1 = ImageSupport.getPixel(test, x, y);
                int pixel2 = ImageSupport.getPixel(loggedImage1, x,y);
                assertEquals(pixel1, pixel2);
            }
        }
		//assertTrue(ImageSupport.compareImages(loggedImage0,loggedImage1));	
		keepFrame();
		//keepFrame();
		
	}
	
	
	@Test
	public void image7() throws Exception{
		String prog = "image7";
		String input = prog
				+"\nimage[1024,1024] g; "
				+ "\n\nimage[1024,1024] h;"
				+ "\ng <- @ 0;"
				+ "\n file f = @ 1; "
				+ "\ng -> SCREEN;"
				+ "\nh[[r,a]] =  g[r,a];"
				+ "h -> SCREEN; "
				+ "\nh -> f;"
				;
		
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {imageFile1,imageFile2}; 
		runCode(prog, bytecode, commandLineArgs);	


		BufferedImage loggedImage0 = RuntimeLog.globalImageLog.get(0);
		BufferedImage loggedImage1 = RuntimeLog.globalImageLog.get(1);

		assertTrue(ImageSupport.compareImages(loggedImage1, loggedImage0 ));
		keepFrame();	
	}
	@Test
	public void imageI01() throws Exception{
		String prog = "imageI01";
		String input = prog
				+"\nimage g;"
				+ "\n file f = @ 1;"
				+ "\ng <- @ 0;"
				+ "\ng -> SCREEN;"
				+ "\ng -> f;"
				+ "\nimage h;"
				+ "\nh <- f;"
				+ "\nh -> SCREEN;"
				;
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {imageFile1,imageFile2}; 
		runCode(prog, bytecode, commandLineArgs);	
		
		BufferedImage loggedImage0 = RuntimeLog.globalImageLog.get(0);
		BufferedImage loggedImage1 = RuntimeLog.globalImageLog.get(1);
		assertTrue(ImageSupport.compareImages(loggedImage1, loggedImage0 ));
		keepFrame();	
	}
	@Test
	public void imageI02() throws Exception{
		String prog = "imageI02";
		String input = prog
				+"\nimage g;"
				+ "file f=\"/Users/purnendu/Documents/me18b.jpg\";"
				+ "\ng <- @ 0;"
				+ "\ng -> SCREEN;"
				+ "\ng -> f;"
				+ "\nimage h;"
				+ "\nh <- f;"
				+ "h -> SCREEN;"
				;
		
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {imageFile1}; 
		runCode(prog, bytecode, commandLineArgs);	

		BufferedImage loggedImage0 = RuntimeLog.globalImageLog.get(0);
		BufferedImage loggedImage1 = RuntimeLog.globalImageLog.get(1);
		assertTrue(ImageSupport.compareImages(loggedImage1, loggedImage0 ));
		keepFrame();	
	}
	
}